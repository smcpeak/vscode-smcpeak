// Place your key bindings in this file to override the defaults
[
    // ------------------- tab -------------------
    {
        "key": "tab",
        "command": "smcpeak.indentRigidly",
        "when": "editorTextFocus && !suggestWidgetVisible"
    },
    {
        "key": "shift+tab",
        "command": "smcpeak.outdentRigidly",
        "when": "editorTextFocus"
    },

    // -------------------- d ------------------
    {
        "key": "ctrl+shift+d",
        "command": "smcpeak.insertDateTime",
        "when": "editorTextFocus"
    },

    // -------------------- a -------------------
    {
        "key": "ctrl+a",
        "command": "smcpeak.cursorHome",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+a",
        "command": "editor.action.selectAll",
        // Allow this in single-line edit boxes, but not the main
        // editor area.
        "when": "textInputFocus && !editorTextFocus"
    },
    {
        "key": "ctrl+shift+a",
        "command": "smcpeak.cursorHomeSelect",
        "when": "textInputFocus"
    },

    {
        "key": "alt+a",
        "command": "editWithShell.runCommand",
        "when": "editorTextFocus"
    },

    // ---------------- home ----------------
    {
        "key": "home",
        "command": "smcpeak.cursorHome",
        "when": "textInputFocus"
    },
    {
        "key": "shift+home",
        "command": "smcpeak.cursorHomeSelect",
        "when": "textInputFocus"
    },

    // These are obviated by my ctrl+pageup binding.
    {
        "key": "ctrl+home",
        "command": "-cursorTop",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+home",
        "command": "-cursorTopSelect",
        "when": "textInputFocus"
    },

    // ------------------ end ---------------------
    // Obviated by ctrl+pagedown binding.
    {
        "key": "ctrl+end",
        "command": "-cursorBottom",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+end",
        "command": "-workbench.action.terminal.scrollToBottom",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+end",
        "command": "-cursorBottomSelect",
        "when": "textInputFocus"
    },

    // -------------------- e -------------------
    {
        "key": "ctrl+e",
        "command": "cursorEnd",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+e",
        "command": "cursorEndSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+e",
        "command": "-workbench.view.explorer"
    },

    // --------------------- w ----------------------
    {
        "key": "ctrl+w",
        "command": "scrollLineUp",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeWindow",
        "when": "!editorIsOpen && !multipleEditorGroups"
    },

    // --------------------- z ---------------------
    {
        "key": "ctrl+z",
        "command": "scrollLineDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+z",
        "command": "-undo",
        "when": "textInputFocus && !editorReadonly"
    },

    // ------------------ backspace -----------------
    {
        "key": "alt+backspace",
        "command": "undo",
        "when": "textInputFocus && !editorReadonly"
    },

    // -------------------- pageup -------------------
    {
        "key": "ctrl+pageup",
        "command": "cursorTop",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+pageup",
        "command": "cursorTopSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+pageup",
        "command": "-workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "ctrl+pageup",
        "command": "-workbench.action.previousEditor"
    },

    // ----------------- pagedown ------------------
    {
        "key": "ctrl+pagedown",
        "command": "cursorBottom",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+pagedown",
        "command": "cursorBottomSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+pagedown",
        "command": "workbench.action.terminal.scrollToBottom",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+pagedown",
        "command": "-workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-workbench.action.nextEditor"
    },

    // ------------------------ r -----------------------
    {
        "key": "ctrl+shift+r",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+r",
        "command": "debug.renameWatchExpression",
        "when": "watchExpressionsFocused"
    },
    {
        "key": "ctrl+shift+r",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "ctrl+shift+r",
        "command": "-editor.action.refactor",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.quickOpenNavigateNextInRecentFilesPicker",
        "when": "inQuickOpen && inRecentFilesPicker"
    },
    {
        "key": "ctrl+shift+r",
        "command": "-workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
        "when": "inQuickOpen && inRecentFilesPicker"
    },

    {
        "key": "ctrl+alt+r",
        "command": "workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.reloadWindow",
        "when": "isDevelopment"
    },

    {
        "key": "ctrl+r",
        "command": "editor.action.replaceOne",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "ctrl+r",
        "command": "search.action.replace",
        "when": "matchFocus && replaceActive && searchViewletVisible"
    },

    // ------------------------ 1 --------------------
    // Obviated by ctrl+r bindings.
    {
        "key": "ctrl+shift+1",
        "command": "-editor.action.replaceOne",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "ctrl+shift+1",
        "command": "-search.action.replace",
        "when": "matchFocus && replaceActive && searchViewletVisible"
    },

    // ------------------------ f2 -------------------
    {
        "key": "f2",
        "command": "workbench.action.files.save"
    },
    {
        "key": "f2",
        "command": "-editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "f2",
        "command": "-debug.setVariable",
        "when": "variablesFocused"
    },
    {
        "key": "f2",
        "command": "-debug.renameWatchExpression",
        "when": "watchExpressionsFocused"
    },
    {
        "key": "f2",
        "command": "-renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },

    // ------------------------ s ------------------
    {
        "key": "ctrl+s",
        "command": "editor.action.startFindReplaceAction"
    },
    {
        "key": "ctrl+s",
        "command": "-workbench.action.files.save"
    },

    // ------------------------ f ---------------------
    {
        "key": "ctrl+f",
        "command": "-actions.find"
    },

    // ---------------------- . --------------------
    {
        "key": "ctrl+.",
        "command": "workbench.action.terminal.findNext",
        "when": "terminalFindWidgetFocused"
    },
    {
        "key": "ctrl+.",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+.",
        "command": "workbench.action.terminal.findNextTerminalFocus",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+.",
        "command": "-editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+.",
        "command": "-problems.action.showQuickFixes",
        "when": "problemFocus"
    },
    {
        "key": "ctrl+.",
        "command": "-settings.action.editFocusedSetting",
        "when": "inSettingsSearch"
    },

    // ---------------------- f3 ---------------------
    {
        "key": "f3",
        "command": "-workbench.action.terminal.findNext",
        "when": "terminalFindWidgetFocused"
    },
    {
        "key": "f3",
        "command": "-editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "f3",
        "command": "-workbench.action.terminal.findNextTerminalFocus",
        "when": "terminalFocus"
    },
    {
        "key": "shift+f3",
        "command": "-editor.action.previousMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+f3",
        "command": "-workbench.action.terminal.findPrevious",
        "when": "terminalFindWidgetFocused"
    },
    {
        "key": "shift+f3",
        "command": "-workbench.action.terminal.findPreviousTerminalFocus",
        "when": "terminalFocus"
    },

    // ------------------------ , ---------------------
    {
        "key": "ctrl+,",
        "command": "editor.action.previousMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+,",
        "command": "-workbench.action.openSettings"
    },
    {
        "key": "ctrl+,",
        "command": "workbench.action.terminal.findPrevious",
        "when": "terminalFindWidgetFocused"
    },
    {
        "key": "ctrl+,",
        "command": "workbench.action.terminal.findPreviousTerminalFocus",
        "when": "terminalFocus"
    },

    // ------------------------ h -----------------------
    // Obviated by ctrl+r binding.
    {
        "key": "ctrl+h",
        "command": "-editor.action.startFindReplaceAction"
    },

    // ------------------------ j -----------------------
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+j",
        "command": "smcpeak.justifyParagraph",
        "when": "editorTextFocus"
    },

    // ----------------------- d -----------------------
    {
        "key": "ctrl+d",
        "command": "deleteRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+d",
        "command": "-editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },

    // -------------------- bookmarks -----------------
    // These are bindings I'm unlikely to use, so just want them
    // available for other purposes.
    {
        "key": "shift+alt+l",
        "command": "-bookmarks.expandSelectionToNext",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+j",
        "command": "-bookmarks.expandSelectionToPrevious",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+k",
        "command": "-bookmarks.shrinkSelection",
        "when": "editorTextFocus"
    },

    // ------------- automatically added ----------------
    // This space is reserved for things that VSCode has automatically
    // added as a result of me using the keybinding UI and I have not
    // then moved into the upper sections.  I'm keeping at least the
    // unbinding of "closeWindow" here so it is not empty.
    {
        "key": "ctrl+shift+w",
        "command": "-workbench.action.closeWindow"
    }
]
